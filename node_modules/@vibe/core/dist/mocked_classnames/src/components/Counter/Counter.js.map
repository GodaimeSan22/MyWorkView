{"version":3,"file":"Counter.js","sources":["../../../../../src/components/Counter/Counter.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport useAfterFirstRender from \"../../hooks/useAfterFirstRender\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport {\n  CounterColor as CounterColorEnum,\n  CounterSize as CounterSizeEnum,\n  CounterType as CounterTypeEnum\n} from \"./CounterConstants\";\nimport { CounterColor, CounterSize, CounterType } from \"./Counter.types\";\nimport { VibeComponentProps, withStaticPropsWithoutForwardRef } from \"../../types\";\nimport styles from \"./Counter.module.scss\";\n\nexport interface CounterProps extends VibeComponentProps {\n  /**\n   * The ID of the element describing the counter.\n   */\n  ariaLabeledBy?: string;\n  /**\n   * Class name applied to the counter element.\n   */\n  counterClassName?: string;\n  /**\n   * The numeric value displayed in the counter.\n   */\n  count?: number;\n  /**\n   * The label of the counter for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * The size of the counter.\n   */\n  size?: CounterSize;\n  /**\n   * The visual style of the counter.\n   */\n  kind?: CounterType;\n  /**\n   * The color of the counter.\n   */\n  color?: CounterColor;\n  /**\n   * The maximum number of digits displayed before truncation.\n   */\n  maxDigits?: number;\n  /**\n   * Text prepended to the counter value.\n   */\n  prefix?: string;\n  /**\n   * Callback fired when the counter is clicked.\n   */\n  onMouseDown?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n  /**\n   * If true, disables counter animations.\n   */\n  noAnimation?: boolean;\n}\n\nconst Counter = ({\n  className,\n  counterClassName,\n  count = 0,\n  size = \"large\",\n  kind = \"fill\",\n  color = \"primary\",\n  maxDigits = 3,\n  ariaLabeledBy = \"\",\n  ariaLabel = \"\",\n  id = \"\",\n  prefix = \"\",\n  onMouseDown = NOOP,\n  noAnimation = false,\n  \"data-testid\": dataTestId\n}: CounterProps) => {\n  const [countChangeAnimationState, setCountChangeAnimationState] = useState(false);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const nodeRef = useRef<HTMLSpanElement>(null);\n\n  const setCountChangedAnimationActive = useCallback(() => {\n    setCountChangeAnimationState(true);\n  }, [setCountChangeAnimationState]);\n\n  const setCountChangedAnimationNotActive = useCallback(() => {\n    setCountChangeAnimationState(false);\n  }, [setCountChangeAnimationState]);\n\n  useEventListener({\n    eventName: \"animationend\",\n    callback: setCountChangedAnimationNotActive,\n    ref\n  });\n\n  const isAfterFirstRender = useAfterFirstRender();\n\n  useEffect(() => {\n    if (isAfterFirstRender.current) {\n      setCountChangedAnimationActive();\n    }\n  }, [count, isAfterFirstRender, setCountChangedAnimationActive]);\n\n  useEffect(() => {\n    if (maxDigits <= 0) {\n      console.error(\"Max digits must be a positive number\");\n    }\n  }, [maxDigits]);\n\n  const classNames = useMemo(() => {\n    return cx(\n      styles.counter,\n      getStyle(styles, camelCase(\"size-\" + size)),\n      getStyle(styles, camelCase(\"kind-\" + kind)),\n      getStyle(styles, camelCase(\"color-\" + color)),\n      {\n        [styles.withAnimation]: countChangeAnimationState\n      },\n      counterClassName\n    );\n  }, [size, kind, color, countChangeAnimationState, counterClassName]);\n\n  const counterId = \"counter\" + (id ? `-${id}` : \"\");\n  const countText = count?.toString().length > maxDigits ? `${10 ** maxDigits - 1}+` : String(count);\n  const counter = (\n    <span id={counterId} data-testid={dataTestId || getTestId(ComponentDefaultTestId.COUNTER, id)}>\n      {prefix + countText}\n    </span>\n  );\n\n  return (\n    <span\n      className={className}\n      aria-label={`${ariaLabel} ${countText}`}\n      aria-labelledby={ariaLabeledBy}\n      onMouseDown={onMouseDown}\n    >\n      <div className={classNames} aria-label={countText} ref={ref}>\n        {noAnimation ? (\n          counter\n        ) : (\n          <SwitchTransition mode=\"out-in\">\n            <CSSTransition\n              key={countText}\n              nodeRef={nodeRef}\n              classNames={{\n                enter: styles.fadeEnter,\n                enterActive: styles.fadeEnterActive,\n                exit: styles.fadeExit,\n                exitActive: styles.fadeExitActive\n              }}\n              // @ts-expect-error @definitelyTyped typings expecting a single parameter for some reason when the function passed here is called with two parameters\n              // See https://github.com/reactjs/react-transition-group/blob/c89f807067b32eea6f68fd6c622190d88ced82e2/src/Transition.js#L522-L534\n              addEndListener={(node: HTMLElement, done: () => void) => {\n                node.addEventListener(\"transitionend\", done, false);\n              }}\n            >\n              <span\n                ref={nodeRef}\n                id={counterId}\n                data-testid={dataTestId || getTestId(ComponentDefaultTestId.COUNTER, id)}\n              >\n                {prefix + countText}\n              </span>\n            </CSSTransition>\n          </SwitchTransition>\n        )}\n      </div>\n    </span>\n  );\n};\n\ninterface CounterStaticProps {\n  sizes: typeof CounterSizeEnum;\n  colors: typeof CounterColorEnum;\n  kinds: typeof CounterTypeEnum;\n}\n\nexport default withStaticPropsWithoutForwardRef<CounterProps, CounterStaticProps>(Counter, {\n  sizes: CounterSizeEnum,\n  colors: CounterColorEnum,\n  kinds: CounterTypeEnum\n});\n"],"names":["withStaticPropsWithoutForwardRef","_ref","className","counterClassName","_ref$count","count","_ref$size","size","_ref$kind","kind","_ref$color","color","_ref$maxDigits","maxDigits","_ref$ariaLabeledBy","ariaLabeledBy","_ref$ariaLabel","ariaLabel","_ref$id","id","_ref$prefix","prefix","_ref$onMouseDown","onMouseDown","NOOP","_ref$noAnimation","noAnimation","dataTestId","_useState","useState","_useState2","_slicedToArray","countChangeAnimationState","setCountChangeAnimationState","ref","useRef","nodeRef","setCountChangedAnimationActive","useCallback","setCountChangedAnimationNotActive","useEventListener","eventName","callback","isAfterFirstRender","useAfterFirstRender","useEffect","current","console","error","classNames","useMemo","cx","styles","counter","getStyle","camelCase","_defineProperty","withAnimation","counterId","concat","countText","length","Math","pow","String","React","createElement","getTestId","ComponentDefaultTestId","COUNTER","SwitchTransition","mode","CSSTransition","key","enter","fadeEnter","enterActive","fadeEnterActive","exit","fadeExit","exitActive","fadeExitActive","addEndListener","node","done","addEventListener","sizes","CounterSizeEnum","colors","CounterColorEnum","kinds","CounterTypeEnum"],"mappings":"43BAiEA,IAsHeA,EAAAA,GAtHC,SAAHC,GAeM,IAdjBC,EAASD,EAATC,UACAC,EAAgBF,EAAhBE,iBAAgBC,EAAAH,EAChBI,MAAAA,OAAQ,IAAHD,EAAG,EAACA,EAAAE,EAAAL,EACTM,KAAAA,OAAO,IAAHD,EAAG,QAAOA,EAAAE,EAAAP,EACdQ,KAAAA,OAAO,IAAHD,EAAG,OAAMA,EAAAE,EAAAT,EACbU,MAAAA,OAAQ,IAAHD,EAAG,UAASA,EAAAE,EAAAX,EACjBY,UAAAA,OAAY,IAAHD,EAAG,EAACA,EAAAE,EAAAb,EACbc,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAAAE,EAAAf,EAClBgB,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EAAAE,EAAAjB,EACdkB,GAAAA,OAAK,IAAHD,EAAG,GAAEA,EAAAE,EAAAnB,EACPoB,OAAAA,OAAS,IAAHD,EAAG,GAAEA,EAAAE,EAAArB,EACXsB,YAAAA,OAAcC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAxB,EAClByB,YAAAA,OAAc,IAAHD,GAAQA,EACJE,EAAU1B,EAAzB,eAEA2B,EAAkEC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAA1EI,EAAyBF,EAAA,GAAEG,EAA4BH,EAAA,GAExDI,EAAMC,EAAuB,MAC7BC,EAAUD,EAAwB,MAElCE,EAAiCC,GAAY,WACjDL,GAA6B,EAC/B,GAAG,CAACA,IAEEM,EAAoCD,GAAY,WACpDL,GAA6B,EAC/B,GAAG,CAACA,IAEJO,EAAiB,CACfC,UAAW,eACXC,SAAUH,EACVL,IAAAA,IAGF,IAAMS,EAAqBC,IAE3BC,GAAU,WACJF,EAAmBG,SACrBT,GAEH,GAAE,CAAChC,EAAOsC,EAAoBN,IAE/BQ,GAAU,WACJhC,EAAa,GACfkC,QAAQC,MAAM,uCAElB,GAAG,CAACnC,IAEJ,IAAMoC,GAAaC,GAAQ,WACzB,OAAOC,EACLC,EAAOC,QACPC,EAASF,EAAQG,EAAU,QAAUhD,IACrC+C,EAASF,EAAQG,EAAU,QAAU9C,IACrC6C,EAASF,EAAQG,EAAU,SAAW5C,IAAO6C,EAAA,CAAA,EAE1CJ,EAAOK,cAAgBzB,GAE1B7B,EAEJ,GAAG,CAACI,EAAME,EAAME,EAAOqB,EAA2B7B,IAE5CuD,GAAY,WAAavC,EAAEwC,IAAAA,OAAOxC,GAAO,IACzCyC,IAAYvD,aAAK,GAALA,MAAkBwD,QAAShD,EAAS,GAAA8C,OAAMG,KAAAC,IAAA,GAAMlD,GAAY,OAAcR,EAAP2D,GAC/EX,GACJY,EAAMC,cAAA,OAAA,CAAA/C,GAAIuC,GAAS,cAAe/B,GAAcwC,EAAUC,EAAuBC,QAASlD,IACvFE,EAASuC,IAId,OACEK,EACEC,cAAA,OAAA,CAAAhE,UAAWA,yBACIe,OAAS0C,OAAIC,IACX,kBAAA7C,EACjBQ,YAAaA,GAEb0C,EAAKC,cAAA,MAAA,CAAAhE,UAAW+C,GAAwB,aAAAW,GAAW1B,IAAKA,GACrDR,EACC2B,GAEAY,EAAAC,cAACI,EAAgB,CAACC,KAAK,UACrBN,EAACC,cAAAM,EACC,CAAAC,IAAKb,GACLxB,QAASA,EACTa,WAAY,CACVyB,MAAOtB,EAAOuB,UACdC,YAAaxB,EAAOyB,gBACpBC,KAAM1B,EAAO2B,SACbC,WAAY5B,EAAO6B,gBAIrBC,eAAgB,SAACC,EAAmBC,GAClCD,EAAKE,iBAAiB,gBAAiBD,GAAM,EAC/C,GAEAnB,EAAAC,cAAA,OAAA,CACEhC,IAAKE,EACLjB,GAAIuC,GAAS,cACA/B,GAAcwC,EAAUC,EAAuBC,QAASlD,IAEpEE,EAASuC,OAQ1B,GAQ2F,CACzF0B,MAAOC,EACPC,OAAQC,EACRC,MAAOC"}