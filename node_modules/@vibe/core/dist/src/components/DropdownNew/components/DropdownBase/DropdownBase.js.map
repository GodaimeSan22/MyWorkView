{"version":3,"file":"DropdownBase.js","sources":["../../../../../../src/components/DropdownNew/components/DropdownBase/DropdownBase.tsx"],"sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport FieldLabel from \"../../../FieldLabel/FieldLabel\";\nimport Text from \"../../../Text/Text\";\nimport styles from \"./DropdownBase.module.scss\";\nimport { getTestId } from \"../../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../../tests/constants\";\nimport { useDropdownContext } from \"../../context/DropdownContext\";\nimport { BaseListItemData } from \"../../../BaseListItem\";\nimport Tooltip from \"../../../Tooltip/Tooltip\";\n\ninterface DropdownBaseProps {\n  dropdownRef: React.Ref<HTMLDivElement>;\n  children: React.ReactNode;\n}\n\nconst DropdownBase = ({ dropdownRef, children }: DropdownBaseProps) => {\n  const {\n    label,\n    required,\n    getLabelProps,\n    className,\n    id,\n    ariaLabel,\n    \"data-testid\": dataTestIdFromContext,\n    disabled,\n    readOnly,\n    error,\n    isFocused,\n    helperText,\n    dir,\n    tooltipProps\n  } = useDropdownContext<BaseListItemData>();\n\n  const coreDropdownElement = (\n    <div\n      ref={dropdownRef}\n      className={cx(styles.wrapper, className, {\n        [styles.disabled]: disabled,\n        [styles.readOnly]: readOnly,\n        [styles.error]: error,\n        [styles.active]: isFocused\n      })}\n      id={id}\n      aria-label={ariaLabel}\n      data-testid={dataTestIdFromContext || getTestId(ComponentDefaultTestId.DROPDOWN, id)}\n    >\n      {children}\n    </div>\n  );\n\n  return (\n    <div dir={dir} className={styles.outerWrapper}>\n      {label && <FieldLabel labelText={label} required={required} {...getLabelProps()} />}\n      <Tooltip {...tooltipProps} content={tooltipProps?.content}>\n        {coreDropdownElement}\n      </Tooltip>\n      {helperText && (\n        <Text color={error ? \"negative\" : \"secondary\"} className={styles.helperText}>\n          {helperText}\n        </Text>\n      )}\n    </div>\n  );\n};\n\nexport default DropdownBase;\n"],"names":["DropdownBase","_ref","dropdownRef","children","_useDropdownContext","useDropdownContext","label","required","getLabelProps","id","ariaLabel","dataTestIdFromContext","readOnly","error","isFocused","helperText","dir","tooltipProps","coreDropdownElement","React","createElement","ref","className","cx","styles","wrapper","_defineProperty","disabled","active","getTestId","ComponentDefaultTestId","DROPDOWN","outerWrapper","FieldLabel","Object","assign","labelText","Tooltip","content","Text","color"],"mappings":"0fAgBA,IAAMA,EAAe,SAAHC,GAAoD,IAA9CC,EAAWD,EAAXC,YAAaC,EAAQF,EAARE,SACnCC,EAeIC,IAdFC,EAAKF,EAALE,MACAC,EAAQH,EAARG,SACAC,EAAaJ,EAAbI,cAEAC,EAAEL,EAAFK,GACAC,EAASN,EAATM,UACeC,EAAqBP,EAApC,eAEAQ,EAAQR,EAARQ,SACAC,EAAKT,EAALS,MACAC,EAASV,EAATU,UACAC,EAAUX,EAAVW,WACAC,EAAGZ,EAAHY,IACAC,EAAYb,EAAZa,aAGIC,EACJC,EACEC,cAAA,MAAA,CAAAC,IAAKnB,EACLoB,UAAWC,EAAGC,EAAOC,QAhBdrB,EAATkB,UAgByCI,EAAAA,EAAAA,EAAAA,EAAA,CAAA,EACpCF,EAAOG,SAbJvB,EAARuB,UAcKH,EAAOZ,SAAWA,GAClBY,EAAOX,MAAQA,GACfW,EAAOI,OAASd,IAEnBL,GAAIA,eACQC,EAAS,cACRC,GAAyBkB,EAAUC,EAAuBC,SAAUtB,IAEhFN,GAIL,OACEgB,EAAKC,cAAA,MAAA,CAAAJ,IAAKA,EAAKM,UAAWE,EAAOQ,cAC9B1B,GAASa,EAAAC,cAACa,EAAUC,OAAAC,OAAA,CAACC,UAAW9B,EAAOC,SAAUA,GAAcC,MAChEW,EAAAC,cAACiB,EAAOH,OAAAC,OAAA,CAAA,EAAKlB,EAAY,CAAEqB,QAASrB,eAAAA,EAAcqB,UAC/CpB,GAEFH,GACCI,EAACC,cAAAmB,EAAK,CAAAC,MAAO3B,EAAQ,WAAa,YAAaS,UAAWE,EAAOT,YAC9DA,GAKX"}