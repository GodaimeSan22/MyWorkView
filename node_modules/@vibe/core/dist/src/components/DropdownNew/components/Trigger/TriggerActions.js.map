{"version":3,"file":"TriggerActions.js","sources":["../../../../../../src/components/DropdownNew/components/Trigger/TriggerActions.tsx"],"sourcesContent":["import React from \"react\";\nimport { CloseSmall, DropdownChevronDown, DropdownChevronUp } from \"@vibe/icons\";\nimport { IconButton } from \"../../../IconButton\";\nimport { Flex } from \"../../../Flex\";\nimport styles from \"./Trigger.module.scss\";\nimport { useDropdownContext } from \"../../context/DropdownContext\";\nimport { BaseListItemData } from \"../../../BaseListItem\";\n\nconst sizeMap = {\n  large: \"medium\",\n  medium: \"small\",\n  small: \"xs\"\n} as const;\n\nconst TriggerActions = () => {\n  const {\n    isOpen,\n    reset,\n    contextOnClear,\n    size,\n    disabled,\n    clearable,\n    readOnly,\n    multi,\n    selectedItem,\n    selectedItems = [],\n    toggleMenu,\n    getMenuProps\n  } = useDropdownContext<BaseListItemData>();\n\n  const hasSelection = multi ? selectedItems?.length > 0 : !!selectedItem;\n  const iconButtonSize = sizeMap[size] || \"small\";\n\n  const handleClear = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (contextOnClear) {\n      contextOnClear();\n    } else {\n      reset();\n    }\n  };\n\n  if (readOnly) {\n    return null;\n  }\n\n  return (\n    <div\n      onKeyDown={e => {\n        e.stopPropagation();\n      }}\n    >\n      <Flex className={styles.actionsWrapper}>\n        {hasSelection && clearable && !disabled && (\n          <IconButton\n            data-testid=\"dropdown-clear-button\"\n            icon={CloseSmall}\n            onClick={handleClear}\n            size={iconButtonSize}\n            ariaLabeledBy={getMenuProps().id}\n          />\n        )}\n        <IconButton\n          icon={isOpen ? DropdownChevronUp : DropdownChevronDown}\n          size={iconButtonSize}\n          disabled={disabled}\n          ariaControls={getMenuProps().id}\n          ariaExpanded={isOpen}\n          ariaLabeledBy={getMenuProps().id}\n          tabIndex={-1}\n          onClick={() => {\n            toggleMenu();\n          }}\n        />\n      </Flex>\n    </div>\n  );\n};\n\nexport default TriggerActions;\n"],"names":["sizeMap","large","medium","small","TriggerActions","_useDropdownContext","useDropdownContext","isOpen","reset","contextOnClear","disabled","_useDropdownContext$s","selectedItems","toggleMenu","getMenuProps","iconButtonSize","size","readOnly","React","createElement","onKeyDown","e","stopPropagation","Flex","className","styles","actionsWrapper","multi","length","selectedItem","clearable","IconButton","icon","CloseSmall","onClick","ariaLabeledBy","id","DropdownChevronUp","DropdownChevronDown","ariaControls","ariaExpanded","tabIndex"],"mappings":"gaAQA,IAAMA,EAAU,CACdC,MAAO,SACPC,OAAQ,QACRC,MAAO,MAGHC,EAAiB,WACrB,IAAAC,EAaIC,IAZFC,EAAMF,EAANE,OACAC,EAAKH,EAALG,MACAC,EAAcJ,EAAdI,eAEAC,EAAQL,EAARK,SAIYC,EAAAN,EACZO,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAClBE,EAAUR,EAAVQ,WACAC,EAAYT,EAAZS,aAIIC,EAAiBf,EAZjBK,EAAJW,OAYsC,QAWxC,OApBUX,EAARY,SAqBO,KAIPC,EACEC,cAAA,MAAA,CAAAC,UAAW,SAAAC,GACTA,EAAEC,iBACJ,GAEAJ,EAAAC,cAACI,EAAK,CAAAC,UAAWC,EAAOC,iBA7BrBrB,EAALsB,OAO2Bf,aAAa,EAAbA,EAAegB,QAAS,IANvCvB,EAAZwB,eAHSxB,EAATyB,YAgCmCpB,GAC7BQ,EAAAC,cAACY,EAAU,CAAA,cACG,wBACZC,KAAMC,EACNC,QAxBU,SAACb,GACnBA,EAAEC,kBACEb,EACFA,IAEAD,KAoBMQ,KAAMD,EACNoB,cAAerB,IAAesB,KAGlClB,EAACC,cAAAY,GACCC,KAAMzB,EAAS8B,EAAoBC,EACnCtB,KAAMD,EACNL,SAAUA,EACV6B,aAAczB,IAAesB,GAC7BI,aAAcjC,EACd4B,cAAerB,IAAesB,GAC9BK,UAAW,EACXP,QAAS,WACPrB,GACF,KAKV"}